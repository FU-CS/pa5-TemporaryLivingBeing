/*
 * This source file was generated by the Gradle 'init' task
 */
package pa5;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class BinaryTreeArrayTest {
    @Test
    void testInsert(){
        BinaryTreeArray tree = new BinaryTreeArray(10);
        tree.insert(1);
        tree.insert(2);
        tree.insert(3);
        tree.insert(4);
        tree.insert(5);
        tree.insert(6);
        tree.insert(7);
        tree.insert(8);
        tree.insert(9);
        tree.insert(10);
        assertEquals("1 2 3 4 5 6 7 8 9 10", tree.levelOrder());
    }
    @Test
    void testInOrder() {
        BinaryTreeArray tree = new BinaryTreeArray(10);
        tree.insert(1);
        tree.insert(2);
        tree.insert(3);
        tree.insert(4);
        tree.insert(5);
        tree.insert(6);
        tree.insert(7);
        tree.insert(8);
        tree.insert(9);
        tree.insert(10);
        assertEquals("8 4 9 2 10 5 1 6 3 7", tree.inOrder());
    }
    @Test
    void testPreOrder() {
        BinaryTreeArray tree = new BinaryTreeArray(10);
        tree.insert(1);
        tree.insert(2);
        tree.insert(3);
        tree.insert(4);
        tree.insert(5);
        tree.insert(6);
        tree.insert(7);
        tree.insert(8);
        tree.insert(9);
        tree.insert(10);
        assertEquals("1 2 4 8 9 5 10 3 6 7", tree.preOrder());
    }
    @Test
    void testPostOrder() {
        BinaryTreeArray tree = new BinaryTreeArray(10);
        tree.insert(1);
        tree.insert(2);
        tree.insert(3);
        tree.insert(4);
        tree.insert(5);
        tree.insert(6);
        tree.insert(7);
        tree.insert(8);
        tree.insert(9);
        tree.insert(10);
        assertEquals("8 9 4 10 5 2 6 7 3 1", tree.postOrder());
    }

    @Test
    void testLongestPath() {
        BinaryTreeArray tree = new BinaryTreeArray(10);
        tree.insert(1);
        tree.insert(2);
        tree.insert(3);
        tree.insert(4);
        tree.insert(5);
        tree.insert(6);
        tree.insert(7);
        tree.insert(8);
        tree.insert(9);
        tree.insert(10);
        assertEquals(4, tree.longestPath());
    }

    @Test
    void testDelete() {
        BinaryTreeArray tree = new BinaryTreeArray(10);
        tree.insert(1);
        tree.insert(2);
        tree.insert(3);
        tree.insert(4);
        tree.insert(5);
        tree.insert(6);
        tree.insert(7);
        tree.insert(8);
        tree.insert(9);
        tree.insert(10);

        assertEquals("1 2 3 4 5 6 7 8 9 10", tree.levelOrder());

        tree.delete(5);

        assertEquals("1 2 3 4 10 6 7 8 9", tree.levelOrder());
    }
    @Test
    void testInsertAfterDelete() {
        BinaryTreeArray tree = new BinaryTreeArray(10);
        tree.insert(1);
        tree.insert(2);
        tree.insert(3);
        tree.insert(4);
        tree.insert(5);
        tree.insert(6);
        tree.insert(7);
        tree.insert(8);
        tree.insert(9);
        tree.insert(10);

        assertEquals("1 2 3 4 5 6 7 8 9 10", tree.levelOrder());

        tree.delete(5);
        tree.delete(4);

        assertEquals("1 2 3 9 10 6 7 8", tree.levelOrder());

        tree.insert(100);
        tree.insert(-3);

        assertEquals("1 2 3 9 10 6 7 8 100 -3", tree.levelOrder());


    }
}
